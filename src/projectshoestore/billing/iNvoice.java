/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectshoestore.billing;

import static java.awt.SystemColor.desktop;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import projectshoestore.DbUtil;
import projectshoestore.LoginPage;
import projectshoestore.dto;
import projectshoestore.mainMenu.mainMenuCashier;

/**
 *
 * @author saroj_000
 */
public class iNvoice extends javax.swing.JInternalFrame {

    /**
     * Creates new form iNvoice
     */
    public iNvoice() {
        initComponents();
        bill_no();
        datess();
        usernames();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        codetxtBox = new javax.swing.JTextField();
        showBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tempitemstable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        productsellTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        AddcartBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        discounttxtBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        billnotxt = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        quanitytxtBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        datetxt = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        usernametxt = new javax.swing.JLabel();
        ConfirmBtn = new javax.swing.JButton();
        ClearBtn = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setClosable(true);

        jLabel1.setText("Bill no :");

        jLabel2.setText("Product ");

        codetxtBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codetxtBoxActionPerformed(evt);
            }
        });

        showBtn.setText("show");
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });

        tempitemstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "productid", "product code", "product brand", "cost price", "stock"
            }
        ));
        jScrollPane1.setViewportView(tempitemstable);

        productsellTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "productid", "product code", "product brand", "cost price", "discount %", "quantity", "selling price", "total"
            }
        ));
        jScrollPane2.setViewportView(productsellTable);

        AddcartBtn.setText("Add to cart");
        AddcartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddcartBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        discounttxtBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discounttxtBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Discount");

        billnotxt.setText("billno");

        jLabel4.setText("Quantity");

        quanitytxtBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quanitytxtBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Date :");

        datetxt.setText("todays daate");

        jLabel7.setText("User :");

        usernametxt.setText("username");

        ConfirmBtn.setText("Confirm ");
        ConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmBtnActionPerformed(evt);
            }
        });

        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(codetxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(showBtn)
                                .addGap(391, 391, 391)
                                .addComponent(jLabel7)
                                .addGap(25, 25, 25)
                                .addComponent(usernametxt)
                                .addGap(0, 46, Short.MAX_VALUE))
                            .addComponent(jSeparator1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(35, 35, 35)
                                .addComponent(quanitytxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(discounttxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(AddcartBtn)
                                .addGap(16, 16, 16)
                                .addComponent(cancelBtn))
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billnotxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(29, 29, 29)
                        .addComponent(datetxt)
                        .addGap(53, 53, 53))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ConfirmBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClearBtn)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(billnotxt)
                    .addComponent(jLabel5)
                    .addComponent(datetxt))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(codetxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showBtn))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(usernametxt)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddcartBtn)
                    .addComponent(cancelBtn)
                    .addComponent(discounttxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(quanitytxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmBtn)
                    .addComponent(ClearBtn))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void discounttxtBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discounttxtBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_discounttxtBoxActionPerformed

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
            String code ;
            code = codetxtBox.getText().toString();
            
            
        try {
            String sql="SELECT * FROM hamroshoestore.productinfo where Productname='"+code+"';";
            PreparedStatement psd = DbUtil.getConnection().prepareStatement(sql);
            ResultSet rs =psd.executeQuery();
            DefaultTableModel tableModel =(DefaultTableModel) tempitemstable.getModel();
            tableModel.setRowCount(0);
            while(rs.next()){
                Float price ;
                price = rs.getFloat("Price");
                float a,b;
                a = (float) (0.2*price);
                b = a+price;
                tableModel.addRow(new Object[]{rs.getInt("productId"),rs.getString("Productname"),rs.getString("Brand"),b,rs.getInt("Stock")});
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_showBtnActionPerformed

    private void codetxtBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codetxtBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codetxtBoxActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        DefaultTableModel tableModel =(DefaultTableModel) tempitemstable.getModel();
            tableModel.setRowCount(0);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void AddcartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddcartBtnActionPerformed
            Integer a,b=0,stock1,quantity,stock2;
            float price,fPrice,temp;
            String productid,productcode,productbrand,costprice,stock;
            TableModel dtm =tempitemstable.getModel();
            productid= dtm.getValueAt(0,0).toString();
            productcode = dtm.getValueAt(0,1).toString();
            productbrand = dtm.getValueAt(0,2).toString();
            costprice = dtm.getValueAt(0,3).toString();
            stock = dtm.getValueAt(0,4).toString();
           
             price =Float.parseFloat(costprice);
             stock1= Integer.parseInt(stock);
             quantity = Integer.parseInt(quanitytxtBox.getText().toString());
             
            // System.out.println(productbrand);
            if (discounttxtBox.getText().toString().equals("")){
                JOptionPane.showMessageDialog(null, "pls enter a intger value from 0-20");
            }
           
            a= Integer.parseInt(discounttxtBox.getText().toString());
           
            if (a<=20 &&a>=0){
              temp= (float) (a*0.01);   
              temp = temp*price;   
              price = price-temp;
            }
            else JOptionPane.showMessageDialog(null,"please enter value in betn 0-20");
            
            
            stock2=stock1-quantity;
            
            if(stock2<0){
                JOptionPane.showMessageDialog(null, "out of stock value please re-enter the value");
            }
           
          else{    
        try {
            String sql="UPDATE `hamroshoestore`.`productinfo` SET `Stock`='"+stock2+"' WHERE `ProductID`='"+productid+"';";
            Statement psd = DbUtil.getConnection().createStatement();
            psd.executeUpdate(sql);
        } catch (SQLException ex) {
            Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
            DefaultTableModel tableModel1 =(DefaultTableModel) productsellTable.getModel();
           // tableModel1.setRowCount(b);
             tableModel1.insertRow(b,(new Object[]{productid,productcode,productbrand,costprice,a,quantity,price,price*(float) quantity}));
            b++;
            }
    }//GEN-LAST:event_AddcartBtnActionPerformed

    private void quanitytxtBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quanitytxtBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quanitytxtBoxActionPerformed

    private void ConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmBtnActionPerformed
         String message = "Confirm sales ";
                String title = "Confirm";
                int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION)
                {

        Integer productid,a,b,stock1,quantity,discount,billno,classid=0;
            float price,fPrice,temp,costprice,total,sellingprice;
            String productcode,productbrand,stock,user;
            String date;
           
            billno = Integer.parseInt(billnotxt.getText().toString());
            date = datess();
            user = usernametxt.getText().toString();
          
            
            TableModel dtm1 =productsellTable.getModel();
            TableModel dtm =tempitemstable.getModel();
            System.out.println(dtm1.getRowCount());
            
       for(int count =0;count<dtm1.getRowCount();count++){
             
           productid     = Integer.parseInt(dtm1.getValueAt(count,0).toString());
            productcode  = dtm1.getValueAt(count,1).toString();
            productbrand = dtm1.getValueAt(count,2).toString();
            costprice    = Float.parseFloat(dtm1.getValueAt(count,3).toString());
            discount     = Integer.parseInt(dtm1.getValueAt(count,4).toString());
            quantity     = Integer.parseInt(dtm1.getValueAt(count,5).toString());
            sellingprice = Float.parseFloat(dtm1.getValueAt(count,6).toString());
            total        = Float.parseFloat(dtm1.getValueAt(count,7).toString());
            
          

            
                //extracting classid
            try {
                String csq = "select productclassid from hamroshoestore.productinfo where `ProductID`='"+productid+"';";
                PreparedStatement psd = DbUtil.getConnection().prepareStatement(csq);
                ResultSet rs = psd.executeQuery();
                while(rs.next()){
                    classid = rs.getInt("productclassid");
                }
            
            } catch (SQLException ex) {
                Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            
//billing  table data insertion     
            try {
               String sql="INSERT INTO `hamroshoestore`.`billinfo` (`billno`, `stotal`, `discount`, `soldtotal`, `saledate`, `sold by`) VALUES ('"+billno+"', '"+costprice+"', '"+discount+"', '"+sellingprice+"', '"+date+"', '"+user+"');";
            // "INSERT INTO `hamroshoestore`.`billinfo` (`billno`, `stotal`, `discount`, `soldtotal`, `saledate`, `sold by`) VALUES ();";
              Statement  psd = DbUtil.getConnection().createStatement();
               psd.executeUpdate(sql);
            } catch (SQLException ex) {
                Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            
            //sale table data insertion
             
            try {
                String sq ="INSERT INTO `hamroshoestore`.`sales` (`classid`, `brand`, `billno`, `quantity`,`productid`) VALUES ('"+classid+"', '"+productbrand+"', '"+billno+"', '"+quantity+"','"+productid+"');";
                Statement ps = DbUtil.getConnection().createStatement();
                ps.executeUpdate(sq);
            } catch (SQLException ex) {
                Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
            }
          
         
         }
                

               billingcal cal =new billingcal();
              cal.setVisible(true);
    
            
                }
    }//GEN-LAST:event_ConfirmBtnActionPerformed

    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        DefaultTableModel tableModel =(DefaultTableModel) productsellTable.getModel();
            tableModel.setRowCount(0);
             bill_no();
         
    }//GEN-LAST:event_ClearBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddcartBtn;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JButton ConfirmBtn;
    private javax.swing.JLabel billnotxt;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField codetxtBox;
    private javax.swing.JLabel datetxt;
    private javax.swing.JTextField discounttxtBox;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable productsellTable;
    private javax.swing.JTextField quanitytxtBox;
    private javax.swing.JButton showBtn;
    private javax.swing.JTable tempitemstable;
    private javax.swing.JLabel usernametxt;
    // End of variables declaration//GEN-END:variables

    private void bill_no() {
            Integer billno=0 ;
        try {
            String sql ="SELECT billno FROM hamroshoestore.billinfo;";
            PreparedStatement psd = DbUtil.getConnection().prepareStatement(sql);
            ResultSet rs = psd.executeQuery();
            while(rs.next()){
                billno = rs.getInt("billno");
            }
            String a ;
            billno++;
            a= ""+billno;
            billnotxt.setText(a);
        } catch (SQLException ex) {
            Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }

    private String datess() {
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        LocalDate localDate = LocalDate.now();
       // System.out.println(dtf.format(localDate)); //2016/11/16
        String s;
        s= localDate.toString();
        datetxt.setText(s);
       
       // u.username();
        return s;
        
    }
   

    private void usernames() {
        String mm = null;
       
        try {
                String sql = "SELECT * FROM hamroshoestore.activeuser;";
                PreparedStatement psd;
                psd = DbUtil.getConnection().prepareStatement(sql);
                ResultSet rs =psd.executeQuery();
            while(rs.next()){
               mm=rs.getString("Username");
            }
        } catch (SQLException ex) {
            Logger.getLogger(iNvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        System.out.println("100");
        System.out.println(mm);
        usernametxt.setText(mm);
        
    }

    
}