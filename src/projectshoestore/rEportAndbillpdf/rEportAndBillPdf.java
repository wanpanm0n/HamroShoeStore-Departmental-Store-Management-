/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectshoestore.rEportAndbillpdf;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import projectshoestore.DbUtil;
import projectshoestore.doa;
import projectshoestore.dto;



/**
 *
 * @author saroj_000
 */
public class rEportAndBillPdf extends javax.swing.JInternalFrame {

    /**
     * Creates new form rEportAndBillPdf
     */
    public rEportAndBillPdf() {
        initComponents();
        addItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brandReportBtn = new javax.swing.JButton();
        classReportBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateyyyyCombobox = new javax.swing.JComboBox<>();
        showBtn = new javax.swing.JButton();
        profitReportBtn = new javax.swing.JButton();
        classReportCbox = new javax.swing.JComboBox<>();
        brandReportCbox = new javax.swing.JComboBox<>();
        datemmCombobox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        overallProfitBtn = new javax.swing.JButton();
        iRepBtn = new javax.swing.JButton();

        setClosable(true);

        brandReportBtn.setText("BrandRepot");
        brandReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandReportBtnActionPerformed(evt);
            }
        });

        classReportBtn.setText("ClassReport");
        classReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classReportBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Select product brand to to see respective sales");

        jLabel2.setText("Select the respective class to see the sales ");

        jLabel3.setText("select date of certain range to check sales betn this date");

        dateyyyyCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateyyyyComboboxActionPerformed(evt);
            }
        });

        showBtn.setText("Sale Report");
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });

        profitReportBtn.setText("Profit Report");
        profitReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profitReportBtnActionPerformed(evt);
            }
        });

        brandReportCbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandReportCboxActionPerformed(evt);
            }
        });

        jLabel4.setText("Click the Button to see over all sales profit");

        overallProfitBtn.setText("Click here");
        overallProfitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overallProfitBtnActionPerformed(evt);
            }
        });

        iRepBtn.setText("Sales iReport");
        iRepBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iRepBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(classReportCbox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(classReportBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(brandReportCbox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(brandReportBtn)))
                        .addGap(128, 128, 128))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateyyyyCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datemmCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(profitReportBtn))
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(0, 13, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iRepBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(overallProfitBtn)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandReportBtn)
                    .addComponent(brandReportCbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(classReportBtn)
                    .addComponent(classReportCbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateyyyyCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showBtn)
                    .addComponent(profitReportBtn)
                    .addComponent(datemmCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(overallProfitBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iRepBtn)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void brandReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandReportBtnActionPerformed
        String brand;
        brand = brandReportCbox.getSelectedItem().toString();
        List<dto> list = new doa().productsale();
        DefaultPieDataset piedataset = new DefaultPieDataset();
        
        try {
            String sql = "SELECT * FROM hamroshoestore.tests where brand='"+brand+"';";
        PreparedStatement psd;
            psd = DbUtil.getConnection().prepareStatement(sql);
            ResultSet rs = psd.executeQuery();
        while(rs.next()){
             piedataset.setValue(rs.getString("productname"),rs.getInt("quantity"));
            
        }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
               
        
       
       JFreeChart piechart =ChartFactory.createPieChart(brand, piedataset,true,true,true);
        PiePlot p= (PiePlot)piechart.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);
       ChartFrame frame = new ChartFrame("Piechart",piechart);
       frame.setVisible(true);
       frame.setSize(450,500);
    }//GEN-LAST:event_brandReportBtnActionPerformed

    private void brandReportCboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandReportCboxActionPerformed
        // TODO add your handling code here:
            
            
    }//GEN-LAST:event_brandReportCboxActionPerformed

    private void dateyyyyComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateyyyyComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateyyyyComboboxActionPerformed

    private void classReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classReportBtnActionPerformed
        String classes;
        classes = classReportCbox.getSelectedItem().toString();
        int id=0;
        
        try {
            String sql = "SELECT * FROM hamroshoestore.productclass where productclass='"+classes+"';";
            PreparedStatement psd = DbUtil.getConnection().prepareStatement(sql);
            ResultSet rs = psd.executeQuery();
            while(rs.next()){
                id = rs.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         DefaultPieDataset piedataset = new DefaultPieDataset();
        
        try {
            String sql = "SELECT sum(quantity),brand FROM hamroshoestore.sales where classid ='"+id+"' group by brand;";
        PreparedStatement psd;
            psd = DbUtil.getConnection().prepareStatement(sql);
            ResultSet rs = psd.executeQuery();
        while(rs.next()){
             piedataset.setValue(rs.getString("brand"),rs.getInt("sum(quantity)"));
            
        }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
          
       JFreeChart piechart =ChartFactory.createPieChart(classes, piedataset,true,true,true);
        PiePlot p= (PiePlot)piechart.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);
       ChartFrame frame = new ChartFrame("Piechart",piechart);
       frame.setVisible(true);
       frame.setSize(450,500);
        
    }//GEN-LAST:event_classReportBtnActionPerformed

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
        // TODO add your handling code here:
        Integer tem1;
        String date,temp1,temp2;
        temp2 = datemmCombobox.getSelectedItem().toString();
        tem1=Integer.parseInt(temp2);
       if(tem1<=9){
           temp2="0"+temp2;
       }
        temp1 = dateyyyyCombobox.getSelectedItem().toString();
        
        date=temp1+"-"+temp2+"-__";
        System.out.println(date);
       
        DefaultPieDataset piedataset = new DefaultPieDataset();
       
             
        try {
            String sqd = "Select sum(quantity),brand from tests where saledate like '"+date+"' group by brand ;";
            PreparedStatement psd = DbUtil.getConnection().prepareStatement(sqd);
            ResultSet r = psd.executeQuery();
            while(r.next()){
                  piedataset.setValue(r.getString("brand"),r.getInt("sum(quantity)"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
                  
             
       
       JFreeChart piechart =ChartFactory.createPieChart("Sales-Report", piedataset,true,true,true);
        PiePlot p= (PiePlot)piechart.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);
       ChartFrame frame = new ChartFrame("SaleChart",piechart);
       frame.setVisible(true);
       frame.setSize(450,500);
    }//GEN-LAST:event_showBtnActionPerformed

    private void profitReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profitReportBtnActionPerformed
        // TODO add your handling code here:
        
        Integer tem1;
        String date,temp1,temp2;
        temp2 = datemmCombobox.getSelectedItem().toString();
        tem1=Integer.parseInt(temp2);
       if(tem1<=9){
           temp2="0"+temp2;
       }
        temp1 = dateyyyyCombobox.getSelectedItem().toString();
        
        date=temp1+"-"+temp2+"-__";
        DefaultCategoryDataset barchardata = new DefaultCategoryDataset();
        //Profit
        try {
            String sqd = "SELECT *,sum((stotal-soldtotal)*quantity),sum(quantity) FROM hamroshoestore.tests inner join productinfo on productinfo.ProductID=tests.productid where saledate like '"+date+"' group by tests.brand;";
            PreparedStatement psd = DbUtil.getConnection().prepareStatement(sqd);
            ResultSet r = psd.executeQuery();
            while(r.next()){
                
                   barchardata.setValue(r.getInt("sum((stotal-soldtotal)*quantity)"), r.getString("sum(quantity)"), r.getString("Brand"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
           
       JFreeChart barchart = ChartFactory.createBarChart("Profit-Report","Monthy", "Amount", barchardata,PlotOrientation.VERTICAL,true,true,false);
        CategoryPlot brchart = barchart.getCategoryPlot();
        brchart.setRangeGridlinePaint(Color.GREEN);
        ChartFrame chartfram = new ChartFrame("Profit-Report",barchart,true);
        chartfram.setVisible(true);
        chartfram.setSize(500,400);
    }//GEN-LAST:event_profitReportBtnActionPerformed

    private void overallProfitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overallProfitBtnActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset barchardata = new DefaultCategoryDataset();
        
        try {
            String sqd = "SELECT *,sum((stotal-soldtotal)*quantity),sum(quantity) FROM hamroshoestore.tests inner join productinfo on productinfo.ProductID=tests.productid where saledate like '____-__-__' group by tests.brand;";
            PreparedStatement psd = DbUtil.getConnection().prepareStatement(sqd);
            ResultSet r = psd.executeQuery();
            while(r.next()){
                
                   barchardata.setValue(r.getInt("sum((stotal-soldtotal)*quantity)"), r.getString("sum(quantity)"), r.getString("Brand"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
           
       JFreeChart barchart = ChartFactory.createBarChart("Profit-Report","Overall", "amount", barchardata,PlotOrientation.VERTICAL,true,true,false);
        CategoryPlot brchart = barchart.getCategoryPlot();
        brchart.setRangeGridlinePaint(Color.GREEN);
        ChartFrame chartfram = new ChartFrame("Profit-Report",barchart,true);
        chartfram.setVisible(true);
        chartfram.setSize(500,400);
    }//GEN-LAST:event_overallProfitBtnActionPerformed

    private void iRepBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iRepBtnActionPerformed
        try {
       String report="C:\\Users\\saroj_000\\Documents\\NetBeansProjects\\New Folder (2)\\project\\src\\projectshoestore\\report\\report1.jrxml";
            JasperReport jr=JasperCompileManager.compileReport(report);     
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/hamroshoestfore","root","1234");
            JasperPrint jp=JasperFillManager.fillReport(jr, null,con);
            JasperViewer.viewReport(jp,false);
        } catch (Exception e) {
             Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_iRepBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brandReportBtn;
    private javax.swing.JComboBox<String> brandReportCbox;
    private javax.swing.JButton classReportBtn;
    private javax.swing.JComboBox<String> classReportCbox;
    private javax.swing.JComboBox<String> datemmCombobox;
    private javax.swing.JComboBox<String> dateyyyyCombobox;
    private javax.swing.JButton iRepBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton overallProfitBtn;
    private javax.swing.JButton profitReportBtn;
    private javax.swing.JButton showBtn;
    // End of variables declaration//GEN-END:variables

    private void addItems() {
        String brand;
        String classes;   
        try {
            String sql  = "SELECT * FROM hamroshoestore.supplierinfo;";
            PreparedStatement psd;
            psd = DbUtil.getConnection().prepareStatement(sql);
            ResultSet rs = psd.executeQuery();
            
            brandReportCbox.removeAllItems();
            while(rs.next()){
                
               brand = rs.getString("brand");
               brandReportCbox.addItem(brand);
              
                
             
            }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
             
            String sq  = "SELECT * FROM hamroshoestore.productclass;";
            PreparedStatement ps;
            ps = DbUtil.getConnection().prepareStatement(sq);
            ResultSet rs = ps.executeQuery();
          
            classReportCbox.removeAllItems();
            while(rs.next()){
           
               classes = rs.getString("productclass");
               classReportCbox.addItem(classes);
              
                
             
            }
        } catch (SQLException ex) {
            Logger.getLogger(rEportAndBillPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //ArrayList<String> years_tmp = new ArrayList<String>();
                dateyyyyCombobox.removeAllItems();
                datemmCombobox.removeAllItems();
                
         for(int years = 1980; years<=Calendar.getInstance().get(Calendar.YEAR); years++) {
                dateyyyyCombobox.addItem(""+years);
            // years_tmp.add(years+"");
            }
         for(int mm =1;mm<=12;mm++){
             datemmCombobox.addItem(""+mm);
             
         }
            //dateyyyyCombobox= new  JComboBox(years_tmp.toArray());
    }
}
